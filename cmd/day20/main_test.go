package main

import (
	"fmt"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestParse(t *testing.T) {
	for n, input := range mazes {
		t.Run(fmt.Sprintf("maze%d", n), func(t *testing.T) {
			grid := parse(input)
			got := display(grid)
			want := strings.TrimLeft(wantParse[n], "\n")

			if d := cmp.Diff(want, got); d != "" {
				t.Errorf("got incorrect display output (-want +got):\n\n%s", d)
			}
		})
	}
}

func TestSolve(t *testing.T) {
	for n, input := range mazes {
		t.Run(fmt.Sprintf("maze%d", n), func(t *testing.T) {
			grid := parse(input)
			got := solve(grid)
			if got != n {
				t.Errorf("got %d steps, want %d", got, n)
			}
		})
	}
}

var mazes = map[int]string{
	23: `
         A
         A
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z
             Z
`,

	58: `
                   A
                   A
  #################.#############
  #.#...#...................#.#.#
  #.#.#.###.###.###.#########.#.#
  #.#.#.......#...#.....#.#.#...#
  #.#########.###.#####.#.#.###.#
  #.............#.#.....#.......#
  ###.###########.###.#####.#.#.#
  #.....#        A   C    #.#.#.#
  #######        S   P    #####.#
  #.#...#                 #......VT
  #.#.#.#                 #.#####
  #...#.#               YN....#.#
  #.###.#                 #####.#
DI....#.#                 #.....#
  #####.#                 #.###.#
ZZ......#               QG....#..AS
  ###.###                 #######
JO..#.#.#                 #.....#
  #.#.#.#                 ###.#.#
  #...#..DI             BU....#..LF
  #####.#                 #.#####
YN......#               VT..#....QG
  #.###.#                 #.###.#
  #.#...#                 #.....#
  ###.###    J L     J    #.#.###
  #.....#    O F     P    #.#...#
  #.###.#####.#.#####.#####.###.#
  #...#.#.#...#.....#.....#.#...#
  #.#####.###.###.#.#.#########.#
  #...#.#.....#...#.#.#.#.....#.#
  #.###.#####.###.###.#.#.#######
  #.#.........#...#.............#
  #########.###.###.#############
           B   J   C
           U   P   P
`,
}

var wantParse = map[int]string{
	23: `
#######A#########
#######.........#
#######.#######.#
#######.#######.#
#######B#######.#
#####       ###.#
C..##       ###.#
##.##       ###.#
##..D       ###.#
#####       ###.#
#########E#####.#
F.#######...###.#
#.#########.###.#
G.#########.....#
###########H#####
A AA (-8,-1)
B BC (-8,-5)
C BC (-1,-7)
D DE (-5,-9)
E FG (-10,-11)
F DE (-1,-12)
G FG (-1,-14)
H ZZ (-12,-15)
`,

	58: `
#################A#############
#.#...#...................#.#.#
#.#.#.###.###.###.#########.#.#
#.#.#.......#...#.....#.#.#...#
#.#########.###.#####.#.#.###.#
#.............#.#.....#.......#
###.###########B###C#####.#.#.#
#.....#                 #.#.#.#
#######                 #####.#
#.#...#                 #.....D
#.#.#.#                 #.#####
#...#.#                 E...#.#
#.###.#                 #####.#
F...#.#                 #.....#
#####.#                 #.###.#
G.....#                 H...#.I
###.###                 #######
J.#.#.#                 #.....#
#.#.#.#                 ###.#.#
#...#.K                 L...#.M
#####.#                 #.#####
N.....#                 O.#...P
#.###.#                 #.###.#
#.#...#                 #.....#
###.###                 #.#.###
#.....#                 #.#...#
#.###.#####Q#R#####S#####.###.#
#...#.#.#...#.....#.....#.#...#
#.#####.###.###.#.#.#########.#
#...#.#.....#...#.#.#.#.....#.#
#.###.#####.###.###.#.#.#######
#.#.........#...#.............#
#########T###U###V#############
A AA (-18,-1)
B AS (-16,-7)
C CP (-20,-7)
D VT (-31,-10)
E YN (-25,-12)
F DI (-1,-14)
G ZZ (-1,-16)
H QG (-25,-16)
I AS (-31,-16)
J JO (-1,-18)
K DI (-7,-20)
L BU (-25,-20)
M LF (-31,-20)
N YN (-1,-22)
O VT (-25,-22)
P QG (-31,-22)
Q JO (-12,-27)
R LF (-14,-27)
S JP (-20,-27)
T BU (-10,-33)
U JP (-14,-33)
V CP (-18,-33)
`,
}
